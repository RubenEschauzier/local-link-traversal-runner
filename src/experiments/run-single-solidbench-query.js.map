{"version":3,"file":"run-single-solidbench-query.js","sourceRoot":"","sources":["run-single-solidbench-query.ts"],"names":[],"mappings":"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","sourcesContent":["import { StatisticIntermediateResults } from '../../../../link-prioritisation-reimplementations/comunica-source-attribution/packages/statistic-intermediate-results/lib';\nimport { ComunicaRunner } from '../packages/comunica-runner';\nimport { queries } from '../queries/solidbench-queries';\nimport { bottleNeckQueries } from '../queries/bottleneck-queries';\nimport { StatisticLinkDiscovery } from '@comunica/statistic-link-discovery';\n\nconst runner = new ComunicaRunner();\n// runSingleQuery(runner, queries.d_1_1, 10);\nrunSingleQueryStreaming(runner, bottleNeckQueries.traversal, 1);\n\nasync function runSingleQuery(runner: ComunicaRunner, query: string, repeats: number){\n    for (let i = 0; i < repeats; i++){\n        console.log(`${i+1}/${repeats}`)\n        let links = 0;\n        let intermediateResults = 0;\n        const statistic = new StatisticLinkDiscovery()\n        const statisticIntermediateResults = new StatisticIntermediateResults();\n        statistic.on((data) => {\n            links++;\n        })\n        statisticIntermediateResults.on((data) => {\n            intermediateResults++\n        })\n        const bs = await runner.executeQuery(query, {\n            \"lenient\": true, \n            [statistic.key.name]: statistic,\n            [statisticIntermediateResults.key.name]: statisticIntermediateResults\n        });\n\n        const { result, elapsed } = await runner.timeIt(\n            async (bs: any) => await bs.toArray(), bs\n        );\n        console.log(`${result.length} results, ${links} links, and ${intermediateResults} intermediate results\n        in ${(elapsed/1000).toFixed(4)} seconds`\n        );    \n    }\n}\n\nasync function runSingleQueryStreaming(runner: ComunicaRunner, query: string, repeats: number){\n    for (let i = 0; i < repeats; i++){\n        console.log(`${i+1}/${repeats}`)\n        let links = 0;\n        const statistic = new StatisticLinkDiscovery()\n        statistic.on((data) => {\n            links++;\n        });\n        const bs = await runner.executeQuery(query, {\n            \"lenient\": true, \n            [statistic.key.name]: statistic,\n        });\n        const start = performance.now();\n        bs.on('data', () => {\n            console.log(`Result after: ${(performance.now() - start)/1000} seconds`);\n        });\n        bs.on('end', () => {\n            console.log(`${links} links in ${(performance.now()-start)/1000} seconds`);\n        });\n    }\n}"]}