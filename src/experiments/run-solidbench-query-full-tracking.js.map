{"version":3,"file":"run-solidbench-query-full-tracking.js","sourceRoot":"","sources":["run-solidbench-query-full-tracking.ts"],"names":[],"mappings":";;AAAA,iEAA6D;AAC7D,sEAAwD;AACxD,iFAA4E;AAC5E,qFAAgF;AAChF,yFAAmF;AACnF,yBAAyB;AACzB,MAAM,MAAM,GAAG,IAAI,gCAAc,EAAE,CAAC;AACpC,cAAc,CAAC,MAAM,EAAE,4BAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAGzC,KAAK,UAAU,cAAc,CAAC,MAAsB,EAAE,KAAa,EAAE,OAAe;IAChF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAC,CAAC;QAC9B,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,kBAAkB,GAAG,IAAI,iDAAsB,EAAE,CAAC;QACxD,MAAM,oBAAoB,GAAG,IAAI,qDAAwB,EAAE,CAAC;QAC5D,MAAM,iBAAiB,GAAG,IAAI,yDAA0B,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;QACnG,iBAAiB,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE;YAC1B,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAClD,EAAE,CAAC,aAAa,CAAC,aAAa,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QACH,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;QAC/B,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE;YACxC,SAAS,EAAE,IAAI;YACf,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,kBAAkB;YACjD,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,oBAAoB;YACrD,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,iBAAiB;SAClD,CAAC,CAAC;QACH,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,MAAM,CAAC,MAAM,CAC3C,KAAK,EAAE,EAAO,EAAE,EAAE,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,EAAE,EAAE,CAC5C,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,iBAAiB,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,GAAC,IAAI,UAAU,CAAC,CAAC;IAC7F,CAAC;AACL,CAAC","sourcesContent":["import { ComunicaRunner } from '../packages/comunica-runner';\nimport { queries } from '../queries/solidbench-queries';\nimport { StatisticLinkDiscovery } from '@comunica/statistic-link-discovery';\nimport { StatisticLinkDereference } from '@comunica/statistic-link-dereference';\nimport { StatisticTraversalTopology} from '@comunica/statistic-traversal-topology';\nimport * as fs from 'fs';\nconst runner = new ComunicaRunner();\nrunSingleQuery(runner, queries.d_2_5, 3);\n\n\nasync function runSingleQuery(runner: ComunicaRunner, query: string, repeats: number){\n    for (let i = 0; i < repeats; i++){\n        let links = 0;\n        const statisticDiscovery = new StatisticLinkDiscovery();\n        const statisticDereference = new StatisticLinkDereference();\n        const statisticTopology = new StatisticTraversalTopology(statisticDiscovery, statisticDereference);\n        statisticTopology.on((data) => {\n            const dataToWrite = JSON.stringify(data, null, 2);\n            fs.writeFileSync('output.json', dataToWrite, 'utf8');\n        });\n        const start = performance.now()\n        const bs = await runner.executeQuery(query, {\n            \"lenient\": true, \n            [statisticDiscovery.key.name]: statisticDiscovery,\n            [statisticDereference.key.name]: statisticDereference,\n            [statisticTopology.key.name]: statisticTopology\n        });\n        const { result, elapsed } = await runner.timeIt(\n            async (bs: any) => await bs.toArray(), bs\n        );\n        \n        console.log(`${result.length} results took ${(performance.now() - start)/1000} seconds`);\n    }\n}\n"]}