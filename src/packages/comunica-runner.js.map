{"version":3,"file":"comunica-runner.js","sourceRoot":"","sources":["comunica-runner.ts"],"names":[],"mappings":";;;AAAA,MAAa,cAAc;IAGvB;QACI,MAAM,WAAW,GAAG,OAAO,CAAC,6CAA6C,CAAC,CAAC,WAAW,CAAC;QACvF,IAAI,CAAC,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;IACpC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,KAAa,EAAE,OAA4B;QACjE,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACvE,OAAO,cAAc,CAAA;IACzB,CAAC;IACM,aAAa,CAAC,cAAmB,EAAE,EAAc;IAExD,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,MAAgB,EAAE,iBAAsC;QACxE,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAChC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC,CAAA;QAC9C,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;QAC1C,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,CAAA;IAC9B,CAAC;CACJ;AAtBD,wCAsBC","sourcesContent":["export class ComunicaRunner {\n    public engine: any;\n\n    public constructor(){\n        const QueryEngine = require('@comunica/query-sparql-link-traversal-solid').QueryEngine;\n        this.engine = new QueryEngine();\n    }\n\n    public async executeQuery(query: string, context: Record<string, any>){\n        const bindingsStream = await this.engine.queryBindings(query, context);\n        return bindingsStream\n    }\n    public consumeStream(bindingsStream: any, cb: () => void){\n\n    }\n    \n    public async timeIt(toTime: Function, functionArguments: Record<string, any>): Promise<ITimingResult>{\n        const start = performance.now();\n        const result = await toTime(functionArguments)\n        const elapsed = performance.now() - start;\n        return { result, elapsed }\n    }\n}\n\nexport interface ITimingResult{\n    result: any,\n    elapsed: number\n}"]}